# encoding: ascii-8bit

require 'seccomp-tools/disasm'

describe SeccompTools::Disasm do
  before do
    @bpf = IO.binread(File.join(__dir__, 'data', 'twctf-2016-diary.bpf'))
    @all = IO.binread(File.join(__dir__, 'data', 'all_inst.bpf'))
  end

  it 'normal' do
    expect(described_class.disasm(@bpf)).to eq <<EOS
 line  OP   JT   JF   K
=================================
 0000: 0x20 0x00 0x00 0x00000000  A = sys_number
 0001: 0x15 0x00 0x01 0x00000002  if (A != 2) goto 0003
 0002: 0x06 0x00 0x00 0x00000000  return KILL
 0003: 0x15 0x00 0x01 0x00000101  if (A != 257) goto 0005
 0004: 0x06 0x00 0x00 0x00000000  return KILL
 0005: 0x15 0x00 0x01 0x0000003b  if (A != 59) goto 0007
 0006: 0x06 0x00 0x00 0x00000000  return KILL
 0007: 0x15 0x00 0x01 0x00000038  if (A != 56) goto 0009
 0008: 0x06 0x00 0x00 0x00000000  return KILL
 0009: 0x15 0x00 0x01 0x00000039  if (A != 57) goto 0011
 0010: 0x06 0x00 0x00 0x00000000  return KILL
 0011: 0x15 0x00 0x01 0x0000003a  if (A != 58) goto 0013
 0012: 0x06 0x00 0x00 0x00000000  return KILL
 0013: 0x15 0x00 0x01 0x00000055  if (A != 85) goto 0015
 0014: 0x06 0x00 0x00 0x00000000  return KILL
 0015: 0x15 0x00 0x01 0x00000142  if (A != 322) goto 0017
 0016: 0x06 0x00 0x00 0x00000000  return KILL
 0017: 0x06 0x00 0x00 0x7fff0000  return ALLOW
EOS
  end

  it 'all instruction' do
    expect(described_class.disasm(@all)).to eq <<EOS
 line  OP   JT   JF   K
=================================
 0000: 0x20 0x00 0x00 0x00000000  A = sys_number
 0001: 0x20 0x00 0x00 0x00000004  A = arch
 0002: 0x20 0x00 0x00 0x00000008  A = instruction_pointer
 0003: 0x20 0x00 0x00 0x00000010  A = args[0]
 0004: 0x20 0x00 0x00 0x00000018  A = args[1]
 0005: 0x20 0x00 0x00 0x00000020  A = args[2]
 0006: 0x20 0x00 0x00 0x00000028  A = args[3]
 0007: 0x20 0x00 0x00 0x00000030  A = args[4]
 0008: 0x20 0x00 0x00 0x00000038  A = args[5]
 0009: 0x80 0xb7 0x1f 0x00000016  A = 64
 0010: 0x81 0xfd 0xbd 0x00000067  X = 64
 0011: 0x06 0xb9 0xcf 0x0000008c  return KILL
 0012: 0x16 0x4f 0x67 0x000000cc  return A
 0013: 0x00 0x1a 0xc5 0x00000028  A = 40
 0014: 0x01 0xd4 0x2f 0x000000a8  X = 168
 0015: 0x60 0xa8 0xe7 0x000000db  A = mem[219]
 0016: 0x61 0x5d 0xd6 0x000000e0  X = mem[224]
 0017: 0x05 0x3d 0x0e 0x00000052  goto 0100
 0018: 0x15 0x57 0xaf 0x000000f2  if (A == 242) goto 0106 else goto 0194
 0019: 0x1d 0x9f 0x5a 0x000000ee  if (A == X) goto 0179 else goto 0110
 0020: 0x35 0x48 0x2c 0x00000042  if (A >= 66) goto 0093 else goto 0065
 0021: 0x3d 0xf6 0x8f 0x000000ac  if (A >= X) goto 0268 else goto 0165
 0022: 0x25 0x61 0xc8 0x00000017  if (A > 23) goto 0120 else goto 0223
 0023: 0x2d 0x81 0x0a 0x000000ef  if (A > X) goto 0153 else goto 0034
 0024: 0x45 0x45 0xc9 0x000000b3  if (A & 179) goto 0094 else goto 0226
 0025: 0x4d 0x1c 0x40 0x0000009e  if (A & X) goto 0054 else goto 0090
EOS
  end
end
